@using Microsoft.AspNetCore.Identity
@using StellumbraSite.Components.Buttons
@using StellumbraSite.Components.Shared
@using Microsoft.AspNetCore.WebUtilities
@using StellumbraSite.Components.Account
@using StellumbraSite.Components.Account.Pages

@layout ForumLayout
@inject HttpClient Http
@inject ILogger<Register> Logger
@inject NavigationManager Navigation
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject SignInManager<ApplicationUser> SignInManager
@inject IJSRuntime JS

@using System.Text
@using StellumbraSite.Data
@using StellumbraSite.Model
@using System.Security.Claims
@using System.Text.Encodings.Web

<div>
    <EditForm Model="Registration" method="post" OnValidSubmit="RegisterTwo" FormName="register">
        <h3 class="dos-font">Register</h3>
        <p>@signupFailMessage</p>
        <input class="custom-text-input" id="email" placeholder="Email" @bind-value="Registration.Email" />
        <input class="custom-text-input" id="username" placeholder="Username" @bind-value="Registration.Username" />
        <input class="custom-text-input" id="password" type="password" placeholder="Password" @bind-value="Registration.Password" />
        <input class="custom-text-input" id="confirmPassword" type="password" placeholder="Confirm Password" @bind-value="Registration.ConfirmPassword" />
        <CustomSubmitButton>
            Sign Up
        </CustomSubmitButton>
    </EditForm>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Registration { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string signupFailMessage;
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private async Task Register(EditContext editContext)
    {
        string username = Registration.Username;
        var user = Activator.CreateInstance<ApplicationUser>();

        await UserStore.SetUserNameAsync(user, Registration.Username, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Registration.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Registration.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = Navigation.GetUriWithQueryParameters(
            Navigation.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Registration.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // TODO: Ensure that email is setup. It currently isnt.
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Registration.Email, ["returnUrl"] = ReturnUrl });
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);

        Navigation.NavigateTo("/forum");
    }
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
    private async Task RegisterTwo(EditContext editContext)
    {
        await JS.InvokeVoidAsync("auth.registerUser", Registration);
    }
}