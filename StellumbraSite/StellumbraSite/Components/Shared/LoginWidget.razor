@using System.Net;

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

@using StellumbraSite.Data
@using StellumbraSite.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using StellumbraSite.Components.Text
@using StellumbraSite.Components.Account
@using StellumbraSite.Components.Buttons
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using StellumbraSite.Components.Account.Shared

<div>
    <EditForm Model="@LoginModel" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="@HandleLoginTwo" FormName="LoginForm">
        <DataAnnotationsValidator />
        <h3 class="dos-font">Login</h3>
        <p>@loginFailedMessage</p>
        <input class="custom-text-input" id="username" type="text" @bind-value=@LoginModel.Username placeholder="Username" />
        <ValidationMessage For="() => LoginModel.Username" />
        <input class="custom-text-input" id="password" type="password" @bind-value=@LoginModel.Password placeholder="Password" />
        <ValidationMessage For="() => LoginModel.Password" />
        <div>
            <label>
                <CustomCheckbox @bind-Value=@LoginModel.RememberMe/>
                <DosP>
                    Remember me
                </DosP>
            </label>
        </div>
        <CustomSubmitButton>
            Log in
        </CustomSubmitButton>
    </EditForm>
</div>

@code {
    public LoginModel LoginModel { get; set; } = new();
    [Parameter]
    public EventCallback<string> OnLogin { get; set; }
    private string? loginFailedMessage;

    [Parameter]
    public string? ReturnUrl { get; set; }

    /*protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContextAccessor.HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContextAccessor.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
    }
    }*/
    private async Task HandleLogin()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        // TODO: Implement rememberME

        //var result = Http.PostAsJsonAsync("/api/Auth/Login", LoginModel);
        var result = await SignInManager.PasswordSignInAsync(LoginModel.Username, LoginModel.Password, LoginModel.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        //if (result.Result.StatusCode == HttpStatusCode.OK)
        {
            //Navigation.NavigateTo("/forum", forceLoad : true);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = LoginModel.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            loginFailedMessage = "Error: Invalid login attempt.";
        }
    }
    private async Task HandleLoginTwo()
    {
        await JS.InvokeVoidAsync("auth.loginAndReload", LoginModel);
    }
}