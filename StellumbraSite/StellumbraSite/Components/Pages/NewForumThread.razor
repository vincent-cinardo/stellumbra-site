@page "/forum/new-thread/{topicName}"
@layout ForumLayout

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using StellumbraSite.Components.Buttons
@using StellumbraSite.Components.Forum
@using StellumbraSite.Components.Hypertext
@using StellumbraSite.Components.Text
@using StellumbraSite.Helpers
@using StellumbraSite.Model

@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<ForumContentFrame>
    @if (forumTopic != null)
    {
        @if (ReturnUrl != null)
        {
            <CustomHypertext HasBlinkingArrow href="@ReturnUrl">
                Back to @forumTopic.TopicShownName
            </CustomHypertext>
        }

        <h3 class="dos-font">New Post: @forumTopic.TopicShownName</h3>
    }

    <DosP>Title</DosP>
    <input class="custom-text-input" id="title" @bind-value="title" />

    <!-- TODO: Ensure that SQL DB is setup to accomadate this role. -->
    @if (topicName == "news")
    {
        <!-- TODO: After the owner role is set up, uncomment this.-->
        <!-- <AuthorizeView Roles="Owner">-->
        <AuthorizeView Roles="Owner Admin">
            <Authorized>
                <DosP>Caption</DosP>
                <input class="custom-text-input" id="caption" @bind-value="caption" />
                <CustomUploadFileButton OnChange="HandleFileSelected">
                    Upload Title Picture    
                </CustomUploadFileButton>

                @if (newsImage != null)
                {
                    <img src="@base64newsImage" />
                }

            </Authorized>
        </AuthorizeView>
    }

    <RichTextEditor @ref=richTextEditor OnClick="SendThread" />
</ForumContentFrame>

@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [Parameter]
    public string? topicName { get; set; }
    private string? title { get; set; }
    private string? caption { get; set; }
    private IBrowserFile? newsImage { get; set; }
    private string? base64newsImage { get; set; }
    public string posterID { get; set; } = "";

    private ForumTopic forumTopic;
    private RichTextEditor richTextEditor;
    protected override async Task OnInitializedAsync()
    {
        forumTopic = await Http.GetFromJsonAsync<ForumTopic>($"/api/Topic/GetTopic/{topicName}");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity.IsAuthenticated)
        {
            posterID = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }
    private async void SendThread()
    {
        ForumThreadDto forumThreadDto = new ForumThreadDto();
        string htmlContent = await richTextEditor.GetQuillHTMLContent();

        forumThreadDto.Id = 0;
        forumThreadDto.Title = title;
        forumThreadDto.TopicName = topicName;
        forumThreadDto.Views = 0;
        forumThreadDto.PosterId = posterID;

        // Doing this to allow SQL to set the ForumPost.Id
        var response = await Http.PostAsJsonAsync("/api/Thread/SubmitThread", forumThreadDto);
        var jsonString = await response.Content.ReadAsStringAsync();
        JObject jObject = JObject.Parse(jsonString);
        ForumThread forumThread = jObject.ToObject<ForumThread>();

        ForumPostDto post = new ForumPostDto();
        post.Id = 0;
        post.ThreadID = forumThread.Id;
        post.PosterId = posterID;
        post.Content = htmlContent;
        post.IsFirstPost = true;

        response = await Http.PostAsJsonAsync("/api/Post/SubmitPost", post);

        if (topicName == "news")
        {
            // TODO: Be more specific in the exception.
            if (newsImage == null)
            {
                throw new Exception("News requires a new image.");
            }

            string titleImagePath = await FileHelper.UploadImage(newsImage, JS);

            NewsItemDto news = new NewsItemDto();
            news.ThreadId = forumThread.Id;
            news.Title = forumThread.Title;
            news.TitleImagePath = titleImagePath;
            news.Caption = caption;

            await Http.PostAsJsonAsync("/api/News/SubmitNews", news);
        }

        string urlWithReturnQuery = QueryHelpers.AddQueryString(
            $"/forum/thread-opened/{forumThread.Id}/1", 
            new Dictionary<string, string> { { "ReturnUrl", ReturnUrl } }
        );

        Navigation.NavigateTo(urlWithReturnQuery, forceLoad: true);
    }
    private async void HandleFileSelected(InputFileChangeEventArgs args)
    {
        // TODO: Check the file format. Ensure it is a png or jpg.

        newsImage = args.File;
        base64newsImage = await FileHelper.ConvertToBase64(newsImage, fullURL : true);
    }
}