@page "/forum/resend-email-confirmation"
@layout ForumLayout

@using System.Text
@using StellumbraSite.Components.Buttons
@using StellumbraSite.Data
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using StellumbraSite.Components.Forum
@using Microsoft.AspNetCore.WebUtilities
@using StellumbraSite.Components.Account
@using System.ComponentModel.DataAnnotations
@using StellumbraSite.Components.Account.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender

<PageTitle>Resend email confirmation</PageTitle>

<ForumContentFrame>
    <div style="display: flex; justify-content: center; flex-direction: column;">
        <h1 class="dos-font">Resend email confirmation</h1>
        <h2 class="dos-font">Enter your email.</h2>
        <hr />
        <StatusMessage Message="@message" />
        <div class="row">
            <div class="col-md-4">
                <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <input class="custom-text-input" placeholder="name@example.com" @bind-value="Input.Email" />
                        <!-- <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" /> -->
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <CustomSubmitButton>Resend</CustomSubmitButton>
                </EditForm>
            </div>
        </div>
    </div>
</ForumContentFrame>

@code {
    private string? message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = "Verification email sent. Please check your email.";
            return;
        }
        string userId = await UserManager.GetUserIdAsync(user);

        await Http.GetAsync($"/api/Auth/SendConfirmationLink/{userId}");

        message = "Verification email sent. Please check your email.";
    }
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
