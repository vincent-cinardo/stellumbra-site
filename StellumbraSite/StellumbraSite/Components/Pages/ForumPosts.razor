@page "/forum/posts/{topicName}/{page:int}"
@layout ForumLayout

@inject HttpClient Http

@inject NavigationManager Navigate
@inject IOptions<CustomSettings> Config

@using System.Net;
@using StellumbraSite.Shared.Model
@using Microsoft.Extensions.Options
@using StellumbraSite.Components.Text
@using StellumbraSite.Components.Forum
@using StellumbraSite.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization

<ForumContentFrame>
    @if (forumTopic != null)
    {
        <h3 class="dos-font">@forumTopic.TopicShownName</h3>
    }

    <div style="display:flex; justify-content: right">
        <AuthorizeView>
            <Authorized>
                <button class="dos-font" style="width: 128px" type="button" @onclick="StartNewPost">Start New Post</button>
            </Authorized>
            <NotAuthorized>
                <DosP>Login to start new posts.</DosP>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    @if (posts != null)
    {
        @for (int i = 0; i < posts.Count; i++)
        {
            @if (i == posts.Count - 1)
            {
                <ForumPostComponent Style="@LastStyle" Post="posts[i]" />
            }
            else
            {
                <ForumPostComponent Style="@DefaultStyle" Post="posts[i]" />
            }
        }
    }

    <Paginator itemsPerPage=pageSize
               itemCount=totalPosts
               pagesPerDirection=PAGES_PER_DIRECTION
               page=page
               pageRootPath=@($"/forum/posts/{topicName}") />
</ForumContentFrame>

@code {

    // TODO: These are reduntant see ForumThreads.razor
    private string DefaultStyle { get => "border-top: 2px solid black !important;"; }
    private string LastStyle { get => "border-top: 2px solid black !important; border-bottom: 2px solid black !important;"; }

    private int pageSize;
    private const int PAGES_PER_DIRECTION = 3;
    private bool logged;

    [Parameter]
    public string topicName { get; set; }
    [Parameter]
    public int page { get; set; }

    private int totalPosts;
    private List<ForumPost> posts;
    private ForumTopic forumTopic;

    protected override async Task OnInitializedAsync()
    {
        pageSize = Config.Value.ForumPageSize;
        forumTopic = await Http.GetFromJsonAsync<ForumTopic>($"/api/Topic/GetTopic/{topicName}");
        totalPosts = await Http.GetFromJsonAsync<int>($"/api/Post/GetPostCount/{topicName}");
        posts = await Http.GetFromJsonAsync<List<ForumPost>>($"/api/Post/GetPosts/{topicName}/{page}/{pageSize}");
    }
    private async Task StartNewPost()
    {
        string uri = Navigate.GetUriWithQueryParameters($"/forum/new-post/{topicName}", new Dictionary<string, object?> { ["ReturnUrl"] = Navigate.Uri });
        Navigate.NavigateTo(uri, forceLoad: true);
    }
}