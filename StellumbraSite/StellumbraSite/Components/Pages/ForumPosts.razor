@page "/forum/thread-opened/{threadID:int}/{page:int}"
@layout ForumLayout

@inject IJSRuntime JS
@inject IOptions<CustomSettings> Config
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Net;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using StellumbraSite.Components.Forum
@using StellumbraSite.Components.Hypertext
@using StellumbraSite.Components.Other
@using StellumbraSite.Components.Shared
@using StellumbraSite.Components.Text
@using StellumbraSite.Model

@if (deletingPost)
{
    <Modal 
    PromptText=@ThreadDeletePrompt
    ConfirmText="Yes"
    DenyText="No"
    OnConfirm="ConfirmDeletePost"
    OnDeny="() => deletingPost = false"/>
}
<ForumContentFrame>
    @if (forumThread != null && forumThread != null)
    {
        <div style="margin-bottom: 1em;">
            <CustomHypertext Href="@ReturnUrl" HasBlinkingArrow=true>
                Back to threads: @forumTopic.TopicShownName
            </CustomHypertext>
            <h3 class="dos-font">@forumThread.Title</h3>
        </div>
    }

    @if (posts != null)
    {
        @for (int i = 0; i < posts.Count; i++)
        {
            int index = i;
            var style = index == posts.Count - 1 ? @LastStyle : @DefaultStyle;
            <ForumPostComponent Style="@style" Post="posts[index]"
                                ViewingUserId="userID"
                                ViewingUserRole="userRole"
                                OnClickDelete="OnClickDeletePost" />
        }
    }

    <AuthorizeView>
        <Authorized>
            <RichTextEditor @ref=richTextEditor OnClick="SendPost" />
        </Authorized>
        <NotAuthorized>
            <DosP>Login to reply to this thread.</DosP>
        </NotAuthorized>
    </AuthorizeView>

    <Paginator itemsPerPage=pageSize
    itemCount=totalThreads
    pagesPerDirection=PAGES_PER_DIRECTION
    page=page
    pageRootPath=@($"/forum/thread-opened/{threadID}") />
</ForumContentFrame>

@code {
    // TODO: These are reduntant see ForumThreads.razor
    private string DefaultStyle { get => "padding-top: 1em; padding-bottom: 1em; border-top: 2px solid #00ff58 !important;"; }
    private string LastStyle { get => "padding-top: 1em; padding-bottom: 1em; border-top: 2px solid #00ff58 !important; border-bottom: 2px solid black !important;"; }

    private int pageSize;
    private const int PAGES_PER_DIRECTION = 3;

    private bool deletingPost = false;
    private ForumPost postSelectedForDeletion;

    [EditorRequired]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    [Parameter]
    public int page { get; set; }
    [Parameter]
    public int threadID { get; set; }

    public string userID { get; set; } = "";
    public string username { get; set; } = "";
    public string userRole { get; set; } = "";

    private string ThreadDeletePrompt
    {
        get => postSelectedForDeletion.IsFirstPost ?
        "Are you sure? Deleting the first post will delete the thread." :
        "Are you sure you want to delete this post?";
    }

    private RichTextEditor richTextEditor;

    private int totalThreads;
    private ForumThread forumThread;
    private ForumTopic forumTopic;
    private List<ForumPost> posts;

    protected override async Task OnInitializedAsync()
    {
        postSelectedForDeletion = null;
        pageSize = Config.Value.ForumPageSize;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // TODO: Redundant code, reuse it somewhere.
        if (user != null && user.Identity.IsAuthenticated)
        {
            userID = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }

        totalThreads = await Http.GetFromJsonAsync<int>($"/api/Thread/GetThreadCount/{threadID}");
        forumThread = await Http.GetFromJsonAsync<ForumThread>($"/api/Thread/GetThreadByID/{threadID}");
        forumTopic = await Http.GetFromJsonAsync<ForumTopic>($"/api/Topic/GetTopic/{forumThread.TopicName}");
        posts = await Http.GetFromJsonAsync<List<ForumPost>>($"/api/Post/GetPosts/{threadID}/{page}/{pageSize}");
    }
    private async void SendPost()
    {
        ForumPostDto forumPost = new ForumPostDto();
        string htmlContent = await richTextEditor.GetQuillHTMLContent();

        forumPost.Id = 0;
        forumPost.ThreadID = threadID;
        forumPost.PosterId = userID;
        forumPost.Content = htmlContent;
        forumPost.IsFirstPost = false;

        await Http.PostAsJsonAsync("/api/Post/SubmitPost", forumPost);
        Navigation.Refresh(forceReload: true);
    }
    private async void ConfirmDeletePost()
    {
        if (postSelectedForDeletion.IsFirstPost)
        {
            await Http.GetAsync($"/api/Thread/DeleteThread/{forumThread.Id}");
            Navigation.NavigateTo($"/forum/threads/{forumThread.TopicName}/1", forceLoad: true);
        }
        else
        {
            await Http.GetAsync($"/api/Post/DeletePost/{postSelectedForDeletion.Id}");
            Navigation.Refresh(forceReload: true);
        }
    }
    private async void OnClickDeletePost(ForumPost forumPost)
    {
        postSelectedForDeletion = forumPost;
        deletingPost = true;
    }
}