@page "/forum/new-post/{topicName}"
@layout ForumLayout

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using StellumbraSite.Components.Hypertext
@using StellumbraSite.Shared.Model
@using Microsoft.Extensions.Options
@using StellumbraSite.Components.Text
@using StellumbraSite.Components.Forum

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<ForumContentFrame>
    @if (forumTopic != null)
    {
        @if (ReturnUrl != null)
        {
            <CustomHypertext HasBlinkingArrow href="@ReturnUrl">
                Back to @forumTopic.TopicShownName
            </CustomHypertext>
        }

        <h3 class="dos-font">New Post: @forumTopic.TopicShownName</h3>
    }

    <DosP>Title</DosP>
    <input class="custom-text-input" id="title" @bind-value="title" />

    <!-- TODO: Ensure that SQL DB is setup to accomadate this role. -->
    @if (topicName == "news")
    {
        <!-- TODO: After the owner role is set up, uncomment this.-->
        <!-- <AuthorizeView Roles="Owner">-->
        <AuthorizeView>
            <Authorized>
                <DosP>Caption</DosP>
                <input class="custom-text-input" id="caption" @bind-value="caption" />
            </Authorized>
        </AuthorizeView>
    }

    <RichTextEditor @ref=richTextEditor OnClick="SendPost" />
</ForumContentFrame>

@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [Parameter]
    public string? topicName { get; set; }
    private string? title { get; set; }
    private string? caption { get; set; }
    public string posterID { get; set; } = "";

    private ForumTopic forumTopic;
    private RichTextEditor richTextEditor;
    protected override async Task OnInitializedAsync()
    {
        forumTopic = await Http.GetFromJsonAsync<ForumTopic>($"/api/Topic/GetTopic/{topicName}");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity.IsAuthenticated)
        {
            posterID = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }
    private async void SendPost()
    {
        ForumPost forumPost = new ForumPost();
        string htmlContent = await richTextEditor.GetQuillHTMLContent();

        forumPost.Id = 0;
        forumPost.Title = title;
        forumPost.TopicName = topicName;
        forumPost.PosterID = posterID;

        // Doing this to allow SQL to set the ForumPost.Id
        var response = await Http.PostAsJsonAsync<ForumPost>("/api/Post/SubmitPost", forumPost);
        var jsonString = await response.Content.ReadAsStringAsync();
        JObject jObject = JObject.Parse(jsonString);
        forumPost = jObject.ToObject<ForumPost>();

        ForumThread thread = new ForumThread();
        thread.Id = 0;
        thread.PostID = forumPost.Id;
        thread.PosterID = posterID;
        thread.Content = htmlContent;
        thread.IsFirstThread = true;

        await Http.PostAsJsonAsync("/api/Thread/SubmitThread", thread);

        if (topicName == "news")
        {
            NewsItem news = new NewsItem();
            news.Id = "";
            news.PostId = forumPost.Id;
            news.Title = forumPost.Title;
            news.TitleImagePath = "space.png";
            news.Caption = caption;

            await Http.PostAsJsonAsync("/api/News/SubmitNews", news);
        }

        Navigation.NavigateTo($"/forum/post-opened/{forumPost.Id}/1", forceLoad: true);
	}
}