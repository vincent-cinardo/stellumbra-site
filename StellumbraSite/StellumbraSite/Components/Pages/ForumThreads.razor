@page "/forum/post-opened/{postID:int}/{page:int}"
@layout ForumLayout

@inject IJSRuntime JS
@inject IOptions<CustomSettings> Config
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Net;
@using Microsoft.Extensions.Options
@using StellumbraSite.Shared.Model
@using StellumbraSite.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization

@if (forumPost != null)
{
    <h3>@forumPost.Title</h3>
}

@if (threads != null)
{
    @foreach (var thread in threads)
    {
        <!-- TODO: User posterID to get UserName from profile DB -->

        <div>
            <p style="border: solid">
                @((MarkupString)thread.Content)
            </p>
        </div>
    }
}

<AuthorizeView>
    <Authorized>
        <RichTextEditor @ref=richTextEditor OnClick="SendThread" />
    </Authorized>
    <NotAuthorized>
        <p>Login to reply to this thread.</p>
    </NotAuthorized>
</AuthorizeView>

<Paginator
itemsPerPage=pageSize
itemCount=totalThreads
pagesPerDirection=PAGES_PER_DIRECTION
page=page
pageRootPath=@($"/forum/post-opened/{postID}")
/>

@code {
    private int pageSize;
    private const int PAGES_PER_DIRECTION = 3;

    [Parameter]
    public int page { get; set; }
    [Parameter]
    public int postID { get; set; }

    public string posterID { get; set; } = "";

    private RichTextEditor richTextEditor;

    private int totalThreads;
    private ForumPost forumPost;
    private List<ForumThread> threads;

    protected override async Task OnInitializedAsync()
    {
        pageSize = Config.Value.ForumPageSize;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity.IsAuthenticated)
        {
            posterID = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        totalThreads = await Http.GetFromJsonAsync<int>($"/api/Thread/GetThreadCount/{postID}");
        forumPost = await Http.GetFromJsonAsync<ForumPost>($"/api/Post/GetPostByID/{postID}");
        threads = await Http.GetFromJsonAsync<List<ForumThread>>($"/api/Thread/GetThreads/{postID}/{page}/{pageSize}");
    }
    private async void SendThread()
    {
        ForumThread forumThread = new ForumThread();
        string htmlContent = await richTextEditor.GetQuillHTMLContent();

        forumThread.Id = 0;
        forumThread.PostID = postID;
        forumThread.PosterID = posterID;
        forumThread.Content = htmlContent;
        forumThread.IsFirstThread = false;

        await Http.PostAsJsonAsync("/api/Thread/SubmitThread", forumThread);
        Navigation.Refresh(forceReload: true);
    }
}