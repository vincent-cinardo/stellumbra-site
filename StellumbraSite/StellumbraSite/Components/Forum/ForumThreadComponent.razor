@using StellumbraSite.Data
@using StellumbraSite.Model
@using StellumbraSite.Components.Text
@using StellumbraSite.Components.Other
@using Microsoft.AspNetCore.WebUtilities
@using StellumbraSite.Components.Hypertext

@inject HttpClient HttpClient;

<div style="@Style" class="forum-listed-content">
    <!-- TODO: Replace redundant 'style' css here. Same as ForumThreadComponent.-->
    @if (threadUserData != null)
    {
        <div style="display: flex; flex-direction: row;">
            <div style="width: 50%">
                <CustomHypertext HasBlinkingArrow=true href=@(FullThreadUrl) OnClick="AddView">
                    @Thread.Title
                </CustomHypertext>
                <DosP Style="font-size: 12px">
                    @Thread.DateTime
                </DosP>
            </div>

            <div style="display: flex; width: 50%; justify-content: right; gap: 8px;">
                <div style="display: flex; flex-direction: column;">
                    <div style="margin:auto; height: 50%">
                        <DosP Style="font-size: 12px">
                            @replies Replies
                        </DosP>
                    </div>
                    <div>
                        <DosP Style="font-size: 12px">
                            @views Views
                        </DosP>
                    </div>
                </div>
                <div>
                    <ProfilePicture UserData=threadUserData Style="margin: auto" />
                </div>
                <div style="margin-top: auto; margin-bottom:auto">
                    <DosP Style="font-size: 12px">
                        @threadUserData.Username
                    </DosP>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public ForumThread Thread { get; set; }

    [Parameter]
    [EditorRequired]
    public string ReturnUrl { get; set;}

    [Parameter]
    public string Style { get; set; } = string.Empty;

    private string FullThreadUrl { get => QueryHelpers.AddQueryString($"/forum/thread-opened/{Thread.Id}/1", new Dictionary<string, string?> { { "ReturnUrl" , ReturnUrl } }); }

    private UserData threadUserData;
    private int views, replies;

    protected override async Task OnInitializedAsync()
    {
        threadUserData = await HttpClient.GetFromJsonAsync<UserData>($"/api/User/GetUserData/{Thread.PosterId}");
        views = await HttpClient.GetFromJsonAsync<int>($"/api/Thread/GetViews/{Thread.Id}");
        replies = await HttpClient.GetFromJsonAsync<int>($"/api/Thread/GetReplies/{Thread.Id}");
    }
    private async Task AddView()
    {
        await HttpClient.GetAsync($"/api/Thread/AddView/{Thread.Id}");
    }
}
